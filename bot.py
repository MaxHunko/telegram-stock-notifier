import json
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import mysql.connector
from telegram.ext import ConversationHandler
import subprocess

"""
üìÑ –ê–≤—Ç–æ—Ä: Max Hunko
üîí –ö–æ–¥ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –ª–∏—à–µ –¥–ª—è –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è. –ö–æ–º–µ—Ä—Ü—ñ–π–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É –∞–≤—Ç–æ—Ä–∞.
"""
 
LOG_FILE = "logs/server_restart.log"
WAITING_ORDER_NUMBER = 1

with open("settings.json", "r") as file:
    settings = json.load(file)

db_config = settings["db_config"]
BOT_TOKEN = settings["bot_token"]
ADMIN_IDS = settings["admins"]

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    keyboard = [
        [KeyboardButton("üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")],
        [KeyboardButton("‚úÖÔ∏è –ü—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ")],
        [KeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")],
        [KeyboardButton("üèÅ –ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ CRM. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)


async def send_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ª–æ–≥—ñ–≤.")
        return

    try:
        with open(LOG_FILE, "r", encoding="utf-8") as log_file:
            logs = log_file.readlines()[-20:]
            log_text = "".join(logs) if logs else "–õ–æ–≥–∏ –ø–æ—Ä–æ–∂–Ω—ñ."
        
        await update.message.reply_text(f"```\n{log_text}\n```", parse_mode="MarkdownV2")
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª –ª–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –ª–æ–≥—ñ–≤: {e}")


async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # üîí

async def in_stock_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # üîí

async def process_close_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    order_id = query.data.split(":")[1]
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()

    cursor.execute("UPDATE orders SET status = 'closed' WHERE pre_order_number = %s", (order_id,))
    conn.commit()
    cursor.close()
    conn.close()

    await query.edit_message_text(f"–ü—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ!")


async def close_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()

    cursor.execute("SELECT pre_order_number FROM orders WHERE status = 'open'")
    orders = cursor.fetchall()

    if not orders:
        await update.message.reply_text("–ù–µ–º–∞—î –ø—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è.")
        cursor.close()
        conn.close()
        return ConversationHandler.END

    context.user_data['open_orders'] = [order[0] for order in orders]

    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è:")
    cursor.close()
    conn.close()

    return WAITING_ORDER_NUMBER


async def process_close_order(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # üîí

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è$"), view_orders))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚úÖÔ∏è –ü—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ$"), in_stock_orders))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å$"), check_availability))
    application.add_handler(CallbackQueryHandler(process_close_order_callback, pattern="^close_order:"))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^logs$"), send_logs))

    close_order_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üèÅ –ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è$"), close_order)],
        states={
            WAITING_ORDER_NUMBER: [
                MessageHandler(
                    filters.Regex("^(üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è|‚úÖÔ∏è –ü—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ|üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å|üèÅ –ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–µ–¥-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)$"),
                    process_close_order
                ),
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_close_order),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(close_order_handler)

    
    application.run_polling()

if __name__ == "__main__":
    main()
